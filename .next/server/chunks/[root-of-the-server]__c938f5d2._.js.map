{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/utils/helper/getDataToken.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\r\nimport jwt from \"jsonwebtoken\";\r\nexport async function getDataToken(request: NextRequest) {\r\n    try {\r\n        const token = request.cookies.get('token')?.value || '';\r\n\r\n        if (!token) {\r\n            throw new Error(\"No token found\");\r\n        }\r\n\r\n        const decodedToken = await jwt.verify(token, 'st4rk');\r\n\r\n  \r\n        if (!decodedToken) {\r\n            throw new Error(\"Invalid token\");\r\n        }\r\n        return decodedToken?.id\r\n    } catch (error: any) {\r\n        console.error(\"Error getting data token:\", error);\r\n        throw new Error(error.message);\r\n\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;;AACO,eAAe,aAAa,OAAoB;IACnD,IAAI;QACA,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAAS;QAErD,IAAI,CAAC,OAAO;YACR,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,eAAe,MAAM,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAG7C,IAAI,CAAC,cAAc;YACf,MAAM,IAAI,MAAM;QACpB;QACA,OAAO,cAAc;IACzB,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM,MAAM,OAAO;IAEjC;AACJ","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/models/userModel.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    fullName: {\r\n        type: String,\r\n        required: [true, \"Please provide username\"],\r\n        unique: false,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, \"Please provide email\"],\r\n        unique: true,\r\n    },\r\n    mobile:{\r\n        type: String,\r\n        required: [true, \"Please provide mobile number\"],\r\n        unique: false,\r\n    },\r\n    password: {\r\n       type: String,\r\n       required: [true, \"Please provide a password\"],\r\n    },\r\n    isVerified: {\r\n       type: Boolean,\r\n       default: false,\r\n    },\r\n    isAdmin: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    forgotPasswordToken: String,\r\n    forgotPasswordTokenExpiry: Date,\r\n    verifyToken: String,\r\n    verifyTokenExpiry: Date,\r\n})\r\n\r\nconst User =mongoose.model(\"user\", userSchema);\r\n\r\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IACZ;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,QAAQ;IACZ;IACA,QAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,QAAQ;IACZ;IACA,UAAU;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;IAChD;IACA,YAAY;QACT,MAAM;QACN,SAAS;IACZ;IACA,SAAS;QACL,MAAM;QACN,SAAS;IACb;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AACvB;AAEA,MAAM,OAAM,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAEpB","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/dbConfig/dbConfig.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nexport async function connect() {\r\n    try{\r\n       await mongoose.connect(\"mongodb://localhost:27017/demo\");\r\n\r\n        const connection = mongoose.connection;\r\n\r\n        connection.on('connected', () => {\r\n            console.log(\"MongoDB connected successfully\")\r\n        })\r\n\r\n        connection.on('error', (err) => {\r\n            console.log('MongoDB connection error' + err);\r\n            process.exit();\r\n       })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IAClB,IAAG;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAEtB,MAAM,aAAa,yGAAA,CAAA,UAAQ,CAAC,UAAU;QAEtC,WAAW,EAAE,CAAC,aAAa;YACvB,QAAQ,GAAG,CAAC;QAChB;QAEA,WAAW,EAAE,CAAC,SAAS,CAAC;YACpB,QAAQ,GAAG,CAAC,6BAA6B;YACzC,QAAQ,IAAI;QACjB;IACH,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/models/conversationModel.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst conversationSchema = new mongoose.Schema({\r\n    participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'user' }],\r\n    messages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'message' }]\r\n}, { timestamps: true });\r\n\r\nconst ConversationModel = mongoose.models.Conversation || mongoose.model(\"Conversation\", conversationSchema); // ✅ fix here\r\nexport default ConversationModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,qBAAqB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC3C,cAAc;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;IACrE,UAAU;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAU;KAAE;AACxE,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,oBAAoB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,YAAY,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,gBAAgB,qBAAqB,aAAa;uCAC5G","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/models/messageModel.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst messageSchema = new mongoose.Schema({\r\n    senderId: { type: mongoose.Schema.Types.ObjectId, ref: \"user\", required: true },\r\n    receiverId: { type: mongoose.Schema.Types.ObjectId, ref: \"user\", required: true },\r\n    message: { type: String, required: true }\r\n}, { timestamps: true });\r\n\r\nconst MessageModel = mongoose.models.message || mongoose.model(\"message\", messageSchema); // ✅ prevent overwrite on hot reload\r\nexport default MessageModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAU;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC9E,YAAY;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAChF,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC5C,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,eAAe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW,gBAAgB,oCAAoC;uCAC/G","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/api/sendmessage/%5Bid%5D/route.ts"],"sourcesContent":["import { getDataToken } from \"@/app/utils/helper/getDataToken\";\r\nimport User from \"@/app/models/userModel\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { connect } from \"@/app/dbConfig/dbConfig\";\r\nimport ConversationModel from \"@/app/models/conversationModel\";\r\nimport MessageModel from \"@/app/models/messageModel\";\r\n\r\nconnect();\r\n\r\nexport async function POST(request: NextRequest, { params }: { params: { id: string } }) {\r\n    try {\r\n        const senderId = await getDataToken(request);\r\n\r\n        if (!senderId) {\r\n            return NextResponse.json({ message: \"Unauthorized\", status: false }, { status: 401 });\r\n        }\r\n        const { id } = await params;\r\n\r\n        const receiverId = id\r\n        const message = await request.json();\r\n\r\n        // console.log(senderId, receiverId, message, 'send, receiver,message')\r\n\r\n        const chatExists = await ConversationModel.findOne({\r\n            participants: { $all: [senderId, receiverId] }\r\n\r\n        })\r\n\r\n        // console.log(chatExists, 'chatexists')\r\n\r\n\r\n        const sender = await User.findById(senderId).select(\"-password\");\r\n        const receiver = await User.findById(senderId).select(\"-password\");\r\n\r\n        if (!sender || !receiver) {\r\n            return NextResponse.json({ message: `${sender ? \"Sender\" : \"Receiver\" + \"user not found\"}`, status: false }, { status: 404 });\r\n        }\r\n\r\n        if (!chatExists) {\r\n            const conversation = await ConversationModel.create({\r\n                participants: [senderId, receiverId]\r\n            })\r\n            // console.log(conversation, 'conversation');\r\n\r\n            const createMessage = await MessageModel.create({\r\n                senderId: senderId,\r\n                receiverId: receiverId,\r\n                message: message\r\n            })\r\n\r\n            // console.log(createMessage, 'createMessage');\r\n\r\n            conversation.messages.push(createMessage._id)\r\n\r\n            await conversation.save()\r\n\r\n            return NextResponse.json({ message: \"Message sent successfully.\", status: true, result: createMessage }, { status: 200 })\r\n        }\r\n\r\n        // find chatExists and update that\r\n        const updateChat = await ConversationModel.findOneAndUpdate(\r\n            { participants: { $all: [senderId, receiverId] } },\r\n            { $setOnInsert: { participants: [senderId, receiverId] } },\r\n            { new: true, upsert: true }\r\n        )\r\n\r\n\r\n        const createMessage = await MessageModel.create({\r\n            senderId,\r\n            receiverId,\r\n            message\r\n        })\r\n\r\n         updateChat.messages.push(createMessage._id)\r\n         await updateChat.save()\r\n\r\n        return NextResponse.json({ message: \"Message sent successfully.\", status: true, result: createMessage }, { status: 200 })\r\n\r\n    } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n        return NextResponse.json({ message: \"Internal Server Error\", status: false }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,CAAA,GAAA,oIAAA,CAAA,UAAO,AAAD;AAEC,eAAe,KAAK,OAAoB,EAAE,EAAE,MAAM,EAA8B;IACnF,IAAI;QACA,MAAM,WAAW,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE;QAEpC,IAAI,CAAC,UAAU;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAgB,QAAQ;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACvF;QACA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,MAAM,aAAa;QACnB,MAAM,UAAU,MAAM,QAAQ,IAAI;QAElC,uEAAuE;QAEvE,MAAM,aAAa,MAAM,2IAAA,CAAA,UAAiB,CAAC,OAAO,CAAC;YAC/C,cAAc;gBAAE,MAAM;oBAAC;oBAAU;iBAAW;YAAC;QAEjD;QAEA,wCAAwC;QAGxC,MAAM,SAAS,MAAM,mIAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,UAAU,MAAM,CAAC;QACpD,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,UAAU,MAAM,CAAC;QAEtD,IAAI,CAAC,UAAU,CAAC,UAAU;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,GAAG,SAAS,WAAW,aAAa,kBAAkB;gBAAE,QAAQ;YAAM,GAAG;gBAAE,QAAQ;YAAI;QAC/H;QAEA,IAAI,CAAC,YAAY;YACb,MAAM,eAAe,MAAM,2IAAA,CAAA,UAAiB,CAAC,MAAM,CAAC;gBAChD,cAAc;oBAAC;oBAAU;iBAAW;YACxC;YACA,6CAA6C;YAE7C,MAAM,gBAAgB,MAAM,sIAAA,CAAA,UAAY,CAAC,MAAM,CAAC;gBAC5C,UAAU;gBACV,YAAY;gBACZ,SAAS;YACb;YAEA,+CAA+C;YAE/C,aAAa,QAAQ,CAAC,IAAI,CAAC,cAAc,GAAG;YAE5C,MAAM,aAAa,IAAI;YAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAA8B,QAAQ;gBAAM,QAAQ;YAAc,GAAG;gBAAE,QAAQ;YAAI;QAC3H;QAEA,kCAAkC;QAClC,MAAM,aAAa,MAAM,2IAAA,CAAA,UAAiB,CAAC,gBAAgB,CACvD;YAAE,cAAc;gBAAE,MAAM;oBAAC;oBAAU;iBAAW;YAAC;QAAE,GACjD;YAAE,cAAc;gBAAE,cAAc;oBAAC;oBAAU;iBAAW;YAAC;QAAE,GACzD;YAAE,KAAK;YAAM,QAAQ;QAAK;QAI9B,MAAM,gBAAgB,MAAM,sIAAA,CAAA,UAAY,CAAC,MAAM,CAAC;YAC5C;YACA;YACA;QACJ;QAEC,WAAW,QAAQ,CAAC,IAAI,CAAC,cAAc,GAAG;QAC1C,MAAM,WAAW,IAAI;QAEtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA8B,QAAQ;YAAM,QAAQ;QAAc,GAAG;YAAE,QAAQ;QAAI;IAE3H,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,QAAQ;QAAM,GAAG;YAAE,QAAQ;QAAI;IAChG;AACJ","debugId":null}}]
}