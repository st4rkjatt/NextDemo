{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/dbConfig/dbConfig.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nexport async function connect() {\r\n    try{\r\n       await mongoose.connect(\"mongodb://localhost:27017/demo\");\r\n\r\n        const connection = mongoose.connection;\r\n\r\n        connection.on('connected', () => {\r\n            console.log(\"MongoDB connected successfully\")\r\n        })\r\n\r\n        connection.on('error', (err) => {\r\n            console.log('MongoDB connection error' + err);\r\n            process.exit();\r\n       })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IAClB,IAAG;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAEtB,MAAM,aAAa,yGAAA,CAAA,UAAQ,CAAC,UAAU;QAEtC,WAAW,EAAE,CAAC,aAAa;YACvB,QAAQ,GAAG,CAAC;QAChB;QAEA,WAAW,EAAE,CAAC,SAAS,CAAC;YACpB,QAAQ,GAAG,CAAC,6BAA6B;YACzC,QAAQ,IAAI;QACjB;IACH,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/models/userModel.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    fullName: {\r\n        type: String,\r\n        required: [true, \"Please provide username\"],\r\n        unique: false,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, \"Please provide email\"],\r\n        unique: true,\r\n    },\r\n    mobile:{\r\n        type: String,\r\n        required: [true, \"Please provide mobile number\"],\r\n        unique: false,\r\n    },\r\n    password: {\r\n       type: String,\r\n       required: [true, \"Please provide a password\"],\r\n    },\r\n    isVerified: {\r\n       type: Boolean,\r\n       default: false,\r\n    },\r\n    isAdmin: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    forgotPasswordToken: String,\r\n    forgotPasswordTokenExpiry: Date,\r\n    verifyToken: String,\r\n    verifyTokenExpiry: Date,\r\n})\r\n\r\nconst User =mongoose.model(\"user\", userSchema);\r\n\r\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IACZ;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,QAAQ;IACZ;IACA,QAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,QAAQ;IACZ;IACA,UAAU;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;IAChD;IACA,YAAY;QACT,MAAM;QACN,SAAS;IACZ;IACA,SAAS;QACL,MAAM;QACN,SAAS;IACb;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AACvB;AAEA,MAAM,OAAM,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAEpB","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/pages/api/logout.ts"],"sourcesContent":["\r\nimport { connect } from \"@/app/dbConfig/dbConfig\";\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\nimport User from \"@/app/models/userModel\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nconnect()\r\n\r\n\r\nexport default async function POST(request: NextRequest) {\r\n    try {\r\n        console.log('logout hit')\r\n        \r\n        const body=  request.body;\r\nconsole.log('body',body)\r\n        return body\r\n\r\n        // Check if the user already exists\r\n        const userDetails = await User.findOne({ email });\r\n        if (!userDetails) {\r\n            return NextResponse.json({ message: \"User not found\", status: false }, { status: 400 });\r\n        }\r\n\r\n        // Verify the password\r\n        const isPasswordValid = await bcrypt.compare(password, userDetails.password);\r\n        if (!isPasswordValid) {\r\n            return NextResponse.json({ message: \"Invalid password\", status: false }, { status: 400 });\r\n        }\r\n        // Create a JWT token\r\n        const token = await jwt.sign({ email: userDetails.email, fullName: userDetails.fullName, mobile: userDetails.mobile }, 'st4rk', { expiresIn: '8h' });\r\n        // Create a response object\r\n\r\n        const response = NextResponse.json({ message: \"User logged in successfully\", status: true }, { status: 200 });\r\n        // Set the token in the response cookies\r\n        response.cookies.set('token', token, {\r\n            httpOnly: true,\r\n        });\r\n        return response;\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error creating user:\", error);\r\n        return NextResponse.json({ message: \"Internal Server Error\", status: false }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACA,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;AAGS,eAAe,KAAK,OAAoB;IACnD,IAAI;QACA,QAAQ,GAAG,CAAC;QAEZ,MAAM,OAAO,QAAQ,IAAI;QACjC,QAAQ,GAAG,CAAC,QAAO;QACX,OAAO;;QAEP,mCAAmC;QACnC,MAAM;QAKN,sBAAsB;QACtB,MAAM;QAIN,qBAAqB;QACrB,MAAM;QACN,2BAA2B;QAE3B,MAAM;IAQV,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,uHAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,QAAQ;QAAM,GAAG;YAAE,QAAQ;QAAI;IAChG;AACJ","debugId":null}}]
}