{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/dbConfig/dbConfig.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nexport async function connect() {\r\n    try{\r\n       await mongoose.connect(\"mongodb://localhost:27017/demo\");\r\n\r\n        const connection = mongoose.connection;\r\n\r\n        connection.on('connected', () => {\r\n            console.log(\"MongoDB connected successfully\")\r\n        })\r\n\r\n        connection.on('error', (err) => {\r\n            console.log('MongoDB connection error' + err);\r\n            process.exit();\r\n       })\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IAClB,IAAG;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAEtB,MAAM,aAAa,yGAAA,CAAA,UAAQ,CAAC,UAAU;QAEtC,WAAW,EAAE,CAAC,aAAa;YACvB,QAAQ,GAAG,CAAC;QAChB;QAEA,WAAW,EAAE,CAAC,SAAS,CAAC;YACpB,QAAQ,GAAG,CAAC,6BAA6B;YACzC,QAAQ,IAAI;QACjB;IACH,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/models/userModel.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    fullName: {\r\n        type: String,\r\n        required: [true, \"Please provide username\"],\r\n        unique: false,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, \"Please provide email\"],\r\n        unique: true,\r\n    },\r\n    mobile:{\r\n        type: String,\r\n        required: [true, \"Please provide mobile number\"],\r\n        unique: false,\r\n    },\r\n    password: {\r\n       type: String,\r\n       required: [true, \"Please provide a password\"],\r\n    },\r\n    isVerified: {\r\n       type: Boolean,\r\n       default: false,\r\n    },\r\n    isAdmin: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    forgotPasswordToken: String,\r\n    forgotPasswordTokenExpiry: Date,\r\n    verifyToken: String,\r\n    verifyTokenExpiry: Date,\r\n})\r\n\r\nconst User =mongoose.model(\"user\", userSchema);\r\n\r\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IACZ;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,QAAQ;IACZ;IACA,QAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,QAAQ;IACZ;IACA,UAAU;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;IAChD;IACA,YAAY;QACT,MAAM;QACN,SAAS;IACZ;IACA,SAAS;QACL,MAAM;QACN,SAAS;IACb;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AACvB;AAEA,MAAM,OAAM,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAEpB","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/St4rk/Desktop/learningAndDevelopment/demo/src/app/api/signup/route.ts"],"sourcesContent":["\r\nimport { connect } from \"@/app/dbConfig/dbConfig\";\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\nimport User from \"@/app/models/userModel\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nconnect()\r\n\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const { fullName, email, mobile, password } = await request.json();\r\n        console.log(\"Received data:\", { fullName, email, mobile, password });\r\n        // Check if the user already exists\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            return NextResponse.json({ message: \"User already exists\", status: false }, { status: 400 });\r\n        }\r\n\r\n        // Create a new user\r\n        const salt = await bcrypt.genSalt(10);\r\n        const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n        const newUser = await User.create({\r\n            fullName,\r\n            email,\r\n            mobile,\r\n            password: hashedPassword,\r\n        });\r\n        console.log(\"New user created:\", newUser);\r\n        const token = await jwt.sign({ id:newUser._id,email, fullName, mobile }, 'st4rk', { expiresIn: '8h' });\r\n\r\n        const response = NextResponse.json({ message: \"User created successfully\", status: true }, { status: 201 });\r\n        // Set the token in the response cookies    \r\n        response.cookies.set('token', token, {\r\n            httpOnly: true,\r\n        })\r\n        return response;\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error creating user:\", error);\r\n        return NextResponse.json({ message: \"Internal Server Error\", status: false }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;AACA,CAAA,GAAA,oIAAA,CAAA,UAAO,AAAD;AAGC,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAChE,QAAQ,GAAG,CAAC,kBAAkB;YAAE;YAAU;YAAO;YAAQ;QAAS;QAClE,mCAAmC;QACnC,MAAM,eAAe,MAAM,mIAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAuB,QAAQ;YAAM,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QAEA,oBAAoB;QACpB,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;QAClC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAGnD,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YAC9B;YACA;YACA;YACA,UAAU;QACd;QACA,QAAQ,GAAG,CAAC,qBAAqB;QACjC,MAAM,QAAQ,MAAM,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,IAAG,QAAQ,GAAG;YAAC;YAAO;YAAU;QAAO,GAAG,SAAS;YAAE,WAAW;QAAK;QAEpG,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA6B,QAAQ;QAAK,GAAG;YAAE,QAAQ;QAAI;QACzG,4CAA4C;QAC5C,SAAS,OAAO,CAAC,GAAG,CAAC,SAAS,OAAO;YACjC,UAAU;QACd;QACA,OAAO;IAGX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,QAAQ;QAAM,GAAG;YAAE,QAAQ;QAAI;IAChG;AACJ","debugId":null}}]
}